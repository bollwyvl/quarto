doctype html
html(lang="en")
  head
    link(
      rel='stylesheet'
      media='screen', href='http://openfontlibrary.org/face/eb-garamond'
      type='text/css')
    
    link( 
      href='http://fonts.googleapis.com/css?family=Inconsolata:400,700&subset=latin,latin-ext'
      rel='stylesheet'
      type='text/css'
    )

    style: :stylus
      @import "lib/codemirror/lib/codemirror.css"
      @import "lib/codemirror/theme/elegant.css"

      bg-color = #fffef6
      primary-color = #554400
      accent-color = #aa4400
      
      body
        background-color bg-color 
        color primary-color
        font-family 'EBGaramond08Regular'
        font-weight normal 
        font-style normal
        display flex
        align-items center
        
      a
        text-decoration none
        color accent-color
        border-bottom dashed 1px accent-color
      
      .container
        flex 2
        h1
          text-align center
      
      .left-margin, .right-margin
        flex 1
      
      p
        line-height 1.5em
        text-align justify
      
      .CodeMirror
        height: auto;
      
      .console
        transition-property all
        transition-duration 0.1s
        position fixed
        width 100%
        height 100px
        background-color black
        bottom -100px
        left 0
        z-index 1000
        
        &.shown
          transition-property all
          transition-duration 0.1s
          bottom 0

      .jqconsole
        padding 10px
        font-family 'Inconsolata'
        background-color primary-color 
        color bg-color

        .jqconsole-cursor
          background-color gray

        .jqconsole-blurred
          .jqconsole-cursor
            background-color #666

        .jqconsole-prompt
          color bg-color

        .jqconsole-old-prompt
          font-weight normal

        .jqconsole-input
          color bg-color

        .jqconsole-old-input
          color #bb0
          font-weight normal

        .jqconsole-output
          color white


  
  body
    .left-margin

    .container
      div: :markdown
        # ![Quarto](./logo.svg)

      .cell: :markdown
        _Quarto_ is a frontend for [Jupyter](http://jupter.org) with the goal of [beautiful](#beautiful) [computing](#computing).
        
        ## beautiful
        _Quarto_ is inspired by great literary artifacts.
        - Galileo's _Sidereal Messenger_
        - Jodorowsky's _Dune_
        
        ## computing
        All of this is being stored in an [Jupyter Notebook](), which means you can use it with any [Jupyter Kernel](http://jupyter.org/kernels), easily share with with colleagues, or the world.
        
        At any point, you can create an indented or fenced code block, and get a text editor. 
      
      .codemirror
        
      .cell: :markdown
        Additionally, you can perform notebook meta commands (like save, search/replace) with the console: try opening it by pressing `ctrl+esc`.

    .right-margin
    .console

    script(src="./lib/keymaster/keymaster.js")

    script(src="./lib/jquery/dist/jquery.js")
    script(src="./lib/jq-console/jqconsole.min.js")
    
    script(src='lib/wysihtml/dist/wysihtml5x-toolbar.min.js')
    script(src='lib/wysihtml/parser_rules/advanced_and_extended.js')

    
    script(src="./lib/codemirror/lib/codemirror.js")
    script(src="./lib/codemirror/mode/python/python.js")

    script: :coffee
      _$ = (x)-> document.querySelector x
      _$$ = (x) -> document.querySelectorAll x

      KEYS =
        esc: 27
      # cells
      cells = _$$ ".cell"
      
      for cell in cells
        editor = new wysihtml5.Editor cell,
          parserRules:  wysihtml5ParserRules
      
      # Editor
      new CodeMirror _$(".codemirror"),
        theme: "elegant"
        mode: "python"
        lineWrapping: true
        value: """
            def hello():
                print("World")
        
        """
      
      # Console
      showTerm = false 
      terminal = $ ".console"
      jqconsole = terminal.jqconsole "Hi\n", ">>>"

      toggleConsole = ->
        terminal.toggleClass "shown"
        if terminal.hasClass "shown"
          jqconsole.Enable()
          jqconsole.Focus()
        else
          jqconsole.Disable()

      jqconsole.RegisterShortcut KEYS.esc, toggleConsole

      startPrompt = ->
        jqconsole.Prompt true, (input) ->
          jqconsole.Write "#{input}\n", "jqconsole-output"
          startPrompt()

      startPrompt()
      
      key "ctrl+escape", toggleConsole
        
        
      
